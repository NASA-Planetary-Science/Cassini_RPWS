#!/usr/bin/env python

"""Reformat Cassini RPWS Langmuir probe Enceladus data 
 ** MUST RUN ON CENTOS6 FOR PYTHON 2.6 OR NEWER **
"""

# 2015-12-09 derived from rpws_lp_reform_titan L. Granroth (LJG)

import glob
import datetime
import os
import sys
import optparse
import logging
import math

from os.path import join as pjoin
from os.path import basename as bname
from os.path import basename as dname

import rpw_pds.util as U
import pspice

import css

##############################################################################
# Main 
def main(argv):

  INVALID_CONSTANT = -1.0e32

  timefmt="%04d-%02d-%02dT%02d:%02d:%06.3fZ"
  
  sUsage = """rpws_lp_reformat - Reformat Langmuir probe data
    usage:  rpws_lp_reformat [options] [FILE_1] [FILE_2] ... [FILE_N]

    where: FILE_1 ... FILE_N are the input files to process.  If no files
           are specified files that match the pattern LP_Sweep_E*.dat in the
           current directory are processed."""

  psr = optparse.OptionParser(usage=sUsage)
  
  sDefKern = os.getenv('CAS_EPHEMERIS_KERNELS')

  psr.add_option('-k', '--kernel-list', dest="sMetaKern", default=sDefKern,
                 help="Specify an alternate SPICE kernel list file, the "+\
                "default is taken from the environment variable "+\
                "CAS_EPHEMERIS_KERNELS (%s)"%sDefKern, metavar="FURNSH_FILE")
 
  psr.add_option("-l", "--log-level", dest="sLevel", metavar="LOG_LEVEL",
                help="Logging level one of [critical, error, warning, "+\
                "info, debug].  The default is info.", type="string",
                action="store", default="info")
  
  sDef = pjoin(css.g_sConfDir, "pds", "RPWS_LP_E_yyyyddd_Enn_V1.LBL.template")
  psr.add_option('-t','--lbl-template', dest='sLblTplt', type="string",
                 help="The label template file, the default is %s"%sDef,
                 default=sDef, metavar="FILE")
					  
  sDef = os.getcwd()
  psr.add_option('-o','--out-dir', dest='sOutDir', type="string",
                 help="Set the output directory, the default is the "+\
                 "current directory.  If the output directory " +\
                 "not exist it is created.", metavar="DIR", default=sDef)
   
  (opts, lFiles) = psr.parse_args(argv[1:])
  
  # Set logging level
  U.setupLogging(opts.sLevel)
  log = logging.getLogger('rpws_lp_reformat')
  
  log.info("Setting process umask to 0002")
  os.umask(0002)
  
  # Furnish the spice kernel
  if opts.sMetaKern == None:
    log.error("No Cassini spice metakernel specified")
    return 4
	 
  pspice.furnsh(opts.sMetaKern)
  
  # generate list of Enceladus encounter intervals (CA +/- 12 hours)
  enceladusList=[]
  for (enceladusID, enceladusCA) in css.tables.cssEnceladus:
    time=datetime.datetime.strptime(enceladusCA,"%Y-%jT%H:%M")
    begtime=time-datetime.timedelta(hours=12)
    endtime=time+datetime.timedelta(hours=12)
    i=1
    while (enceladusCA >= css.tables.cssOrbit[i][1]) and (i < len(css.tables.cssOrbit)-1):
      i+=1
    orbitNum=css.tables.cssOrbit[i-1][0]
    begTime=begtime.strftime("%Y-%jT%H:%M")
    endTime=endtime.strftime("%Y-%jT%H:%M")
    enceladusList.append((enceladusID,orbitNum,begTime,endTime))
    #print enceladusID, enceladusCA, " in ", orbitNum, begTime, endTime
  
  # read in label template which will act as a format string, 'b' is used to
  # preserve DOS style line endings which are required for PDS3
  f=file(opts.sLblTplt,'rb')
  template=f.read()
  f.close()
  
  # Get the list of files to process if not specified
  if len(lFiles) == 0:
    lFiles = glob.glob("LP_Sweep_E*.dat")
  if len(lFiles) == 0:
    log.warning("No input files specified or found, successfully did nothing.")
    return 0
  
  lFiles.sort()
  
  # process all LP_Sweep_E*.dat files in the current directory
  for datname in lFiles:
    log.info("Reading %s"%datname)
    datf=file(datname,'rb')
    line=datf.readline()
  
    # extract begin time from the first line and open TAB file
    col=line.split()
    sec=col[5].split('.')
    begtime=datetime.datetime(
      int(col[0]),int(col[1]),int(col[2]),
      int(col[3]),int(col[4]),int(sec[0]),int(sec[1])*100)
    begstring=begtime.strftime("%Y-%jT%H:%M:%S.%f")[:21]
  
    # search enceladusList
    i=0
    while (begstring[:14] >= enceladusList[i][3]) and (i < len(enceladusList)-1):
      i+=1
    if (begstring[:14] >= enceladusList[i][2]) and (begstring[:14] < enceladusList[i][3]):
      enceladusID=enceladusList[i][0]
      orbitNum=enceladusList[i][1]
    else:
      log.error("Time %s not in %s interval %s to %s\n"%
                (begstring[:14],enceladusList[i][0],enceladusList[i][2],
					 enceladusList[i][3]))
      sys.exit(4)
  
    tabname="RPWS_LP_E_%s_%s_V1.TAB"%(begtime.strftime("%Y%j"),enceladusID)
    lblname=tabname.split('.')[0]+".LBL"
    log.debug("%s %s %s"%(datname, tabname, lblname))
    #print datname, tabname, lblname
	 
    if not os.path.isdir(opts.sOutDir):
      log.info("Creating directory %s"%opts.sOutDir)
      os.makedirs(opts.sOutDir, 0775)

    tabpath=pjoin(opts.sOutDir, tabname)
    log.info("Writing %s"%tabpath)
    tabf=file(tabpath,'wb')

    # Spice IDs and Enceladus Radius in km
    enceladusN=602
    cassiniN=-82
    enceladusR=(pspice.bodvrd('ENCELADUS','RADII')[0]+
      pspice.bodvrd('ENCELADUS','RADII')[1]+
      pspice.bodvrd('ENCELADUS','RADII')[2]) / 3.0
      
    # reformat the data file into a PDS table
    # may be blank lines at end, so need to loop on len(col)  
    recs=0
    while len(col) > 10:
      Y=int(col[0])
      m=int(col[1])
      d=int(col[2])
      H=int(col[3])
      M=int(col[4])
      second=float(col[5])
      pdstime=timefmt%(Y,m,d,H,M,second)
      # print pdstime
      # get spacecraft position from spice
      et = pspice.utc2et(pdstime[:-1])
      state=pspice.spkez(cassiniN, et, 'J2000', 'NONE', enceladusN)[0]
      distance=math.sqrt(state[0]*state[0]+state[1]*state[1]+state[2]*state[2])
      Re=distance/enceladusR
      #Re=float(col[7])
      Ne=float(col[8])
      if col[9] == '2.00000000e+02':
        col[9]='NaN'
      Te=float(col[9])
      Usc=float(col[10])
      if math.isnan(Ne):
        Ne = INVALID_CONSTANT
      if math.isnan(Te):
        Te = INVALID_CONSTANT
      if math.isnan(Usc):
        Usc = INVALID_CONSTANT
      tabf.write(pdstime+
        ",%15.8E"%Re+
        ",%15.8E"%Ne+
        ",%15.8E"%Te+
        ",%15.8E"%Usc+"\r\n")
      recs+=1
      line=datf.readline()
      if line:
        col=line.split()
      else:
        col=()
  
    datf.close()
    tabf.close()
  
    # now create the label file
    lblpath = pjoin(opts.sOutDir, lblname)
    log.info("Writing %s"%lblpath)
    lblf=file(lblpath,'wb')
  
    # end time is 24 seconds past last record time
    S=int(second)
    ns=int((second-float(S))*1000000)
    endtime=datetime.datetime(Y,m,d,H,M,S,ns)
    endtime+=datetime.timedelta(seconds=24)
    endstring=endtime.strftime("%Y-%jT%H:%M:%S.%f")[:21]
  
    # search MissionPhaseName tuple
    i=0
    while (begstring[:8] >= css.tables.MissionPhaseName[i][2]) and \
          (i < len(css.tables.MissionPhaseName)-1):
      i+= 1
    missionphase=css.tables.MissionPhaseName[i][0]
  
    # Convert the SCETs to SCLKs
    et = pspice.utc2et(begstring)
    begsclk= pspice.sce2s(css.g_nSpiceId, et)
    et = pspice.utc2et(endstring)
    endsclk= pspice.sce2s(css.g_nSpiceId, et)
  
    creationtime=datetime.datetime.now().strftime("%Y-%m-%d")
  
    lblf.write(template%{
      'tabname':tabname,
      'Enn':enceladusID,
      'begscet':begstring,'endscet':endstring,
      'recs':recs,
      'productID':tabname[:-7],
      'missionphase':missionphase,
      'orbitnum':orbitNum,
      'begsclk':begsclk,'endsclk':endsclk,
      'creationtime':creationtime})
    lblf.close()
  
  return 0

##############################################################################
# Kicker Stub
if __name__ == "__main__":
	sys.exit(main(sys.argv))

