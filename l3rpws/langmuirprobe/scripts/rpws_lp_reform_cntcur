#!/usr/bin/env python

"""Reformat Cassini RPWS Langmuir probe CntCur data 
 ** MUST RUN ON CENTOS6 FOR PYTHON 2.6 OR NEWER **
"""

# 2015-01-13 modified from neproxy L. Granroth (LJG)

import glob
import datetime
import os
import sys
import optparse
import logging
import math

from os.path import join as pjoin
from os.path import basename as bname
from os.path import basename as dname

import rpw_pds.util as U
import pspice

import css

##############################################################################
# Main 
def main(argv):

  timefmt="%04d-%02d-%02dT%02d:%02d:%06.3fZ"
  
  sUsage = """rpws_lp_reform_cntcur - Reformat Langmuir probe data
    usage:  rpws_lp_reform_cntcur [options] [FILE_1] [FILE_2] ... [FILE_N]

    where: FILE_1 ... FILE_N are the input files to process.  If no files
           are specified files that match the pattern LP_CntCur_???????.dat
           in the current directory are processed."""

  psr = optparse.OptionParser(usage=sUsage)

  sDefKern = os.getenv('CAS_EPHEMERIS_KERNELS')
 
  psr.add_option('-k', '--kernel-list', dest="sMetaKern", default=sDefKern,
                 help="Specify an alternate SPICE kernel list file, the "+\
                "default is taken from the environment variable "+\
                "CAS_EPHEMERIS_KERNELS (%s)"%sDefKern, metavar="FURNSH_FILE")

  psr.add_option("-l", "--log-level", dest="sLevel", metavar="LOG_LEVEL",
                help="Logging level one of [critical, error, warning, "+\
                "info, debug].  The default is info.", type="string",
                action="store", default="info")
  
  sDef = pjoin(css.g_sConfDir, "pds", "RPWS_LP_CNTCUR_yyyyddd_V1.LBL.template")
  psr.add_option('-t','--lbl-template', dest='sLblTplt', type="string",
                 help="The label template file, the default is %s"%sDef,
                 default=sDef, metavar="FILE")
					  
  sDef = os.getcwd()
  psr.add_option('-o','--out-dir', dest='sOutDir', type="string",
                 help="Set the output directory, the default is the "+\
                 "current directory.  If the output directory " +\
                 "not exist it is created.", metavar="DIR", default=sDef)
   
  (opts, lFiles) = psr.parse_args(argv[1:])
  
  # Set logging level
  U.setupLogging(opts.sLevel)
  log = logging.getLogger('rpws_lp_reformat')
  
  log.info("Setting process umask to 0002")
  os.umask(0002)

  # Coarse target begin dates
  cssTarget=(
    ('"SOLAR SYSTEM"',			"1997-288"),
    ('{"SOLAR SYSTEM","VENUS"}',	"1998-116"),
    ('"SOLAR SYSTEM"',			"1998-117"),
    ('{"SOLAR SYSTEM","VENUS"}',	"1999-175"),
    ('"SOLAR SYSTEM"',			"1999-176"),
    ('{"SOLAR SYSTEM","EARTH"}',	"1999-227"),
    ('"SOLAR SYSTEM"',			"2000-037"),
    ('{"SOLAR SYSTEM","JUPITER"}',	"2000-363"),
    ('"SOLAR SYSTEM"',			"2001-120"),
    ('{"SOLAR SYSTEM","SATURN"}',	"2004-008"),
    ('"SATURN"',			"2017-258"),
    ('"END OF MISSION"',		"2027-001"))

  # Furnish the spice kernel
  if opts.sMetaKern == None:
    log.error("No Cassin spice metakernel specified")
    return 4
	 
  pspice.furnsh(opts.sMetaKern)

  # read in label template which will act as a format string, 'b' is used to
  # preserve DOS style line endings which are required for PDS3
  f=file(opts.sLblTplt,'rb')
  template=f.read()
  f.close()
  
  # Get the list of files to process if not specified
  if len(lFiles) == 0:
    lFiles = glob.glob("LP_CntCur_???????.dat")
  if len(lFiles) == 0:
    log.warning("No input files specified or found, successfully did nothing.")
    return 0
  
  lFiles.sort()

  # process all LP_CntCur_???????.dat files in the current directory
  for datname in lFiles:
    log.info("Reading %s"%datname)
    datf=file(datname,'rb')
    line=datf.readline()
  
    # extract begin time from the first line and open TAB file
    col=line.split()
    sec=col[5].split('.')
    begtime=datetime.datetime(
      int(col[0]),int(col[1]),int(col[2]),0,0,0,0)
    # int(col[3]),int(col[4]),int(sec[0]),int(sec[1])*100)
    # full day intervals
    endtime=begtime+datetime.timedelta(days=1)
    scetday=begtime.strftime("%Y-%m-%d")[:10]
    begstring=begtime.strftime("%Y-%jT00:00:00.000")[:21]
    endstring=endtime.strftime("%Y-%jT00:00:00.000")[:21]
    tabname="RPWS_LP_CNTCUR_%s_V1.TAB"%begtime.strftime("%Y%j")
    lblname=tabname.split('.')[0]+".LBL"
    log.debug("%s %s %s"%(datname, tabname, lblname))

    if not os.path.isdir(opts.sOutDir):
      log.info("Creating directory %s"%opts.sOutDir)
      os.makedirs(opts.sOutDir, 0775)

    tabpath=pjoin(opts.sOutDir, tabname)
    log.info("Writing %s"%tabpath)
    tabf=file(tabpath,'wb')
    cruf=file(tabpath+'.cruft','wb')

    # reformat the data file into a PDS table
    # may be blank lines at end, so need to loop on len(col)
    # segregate non-matching dates to ".cruft" file
    # substitute INVALID_CONSTANT -1.00000E32 for NAN
    recs=0
    cruft=0
    while len(col) > 7:
      Y=int(col[0])
      m=int(col[1])
      d=int(col[2])
      H=int(col[3])
      M=int(col[4])
      second=float(col[5])
      pdstime=timefmt%(Y,m,d,H,M,second)
      Udac=float(col[6])
      Icur=float(col[7])
      if math.isnan(Udac):
        Udac=-1.00000e32
      if math.isnan(Icur):
        Icur=-1.00000e32
      if pdstime[:10] == scetday:
        tabf.write(pdstime+",%12.5E"%Udac+",%12.5E"%Icur+"\r\n")
        recs+=1
      else:
        cruf.write(pdstime+",%12.5E"%Udac+",%12.5E"%Icur+"\r\n")
        cruft+=1
      line=datf.readline()
      if line:
        col=line.split()
      else:
        col=()

    datf.close()
    tabf.close()
    cruf.close()
    if cruft == 0:
      os.remove(tabpath+'.cruft')
  
    # now create the label file
    lblpath = pjoin(opts.sOutDir, lblname)
    log.info("Writing %s"%lblpath)
    lblf=file(lblpath,'wb')
  
    # search MissionPhaseName tuple
    i=0
    # print begstring[:8]
    while (begstring[:8] >= css.tables.MissionPhaseName[i][2]) and \
          (i < len(css.tables.MissionPhaseName)-1):
      i+= 1
    missionphase=css.tables.MissionPhaseName[i][0]

    # search cssTarget tuple
    i=0
    while (begstring[:8] >= cssTarget[i][1]) and \
          (i < len(cssTarget)-1):
      i+=1
    target=cssTarget[i-1][0]
  
    # Convert the SCETs to SCLKs
    et = pspice.utc2et(begstring)
    begsclk= pspice.sce2s(css.g_nSpiceId, et)
    et = pspice.utc2et(endstring)
    endsclk= pspice.sce2s(css.g_nSpiceId, et)
  
    creationtime=datetime.datetime.now().strftime("%Y-%m-%d")
 
    lblf.write(template%{
      'tabname':tabname,
      'scetday':scetday,
      'begscet':begstring,'endscet':endstring,
      'recs':recs,
      'productID':tabname[:-7],
      'missionphase':missionphase,
      'target':target,
      'begsclk':begsclk,'endsclk':endsclk,
      'creationtime':creationtime})
    lblf.close()
  
  return 0

##############################################################################
# Kicker Stub
if __name__ == "__main__":
	sys.exit(main(sys.argv))

